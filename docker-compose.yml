services:
  api_service:
    container_name: api_service
    restart: unless-stopped
    profiles:
      - microservices
    build:
      context: ./Backend/
      dockerfile: EmitterPersonalAccount.API/Dockerfile
    dns: 
      - 8.8.8.8 
      - 1.1.1.1 
    env_file: .env
    environment:
      - ASPNETCORE_URLS=http://+:5000
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5000:5000"
    networks:
      - emitterPersonal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      api_postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  email_sender_service:
    container_name: email_sender_service
    restart: unless-stopped
    profiles:
      - microservices
    build:
      context: ./Backend/
      dockerfile: EmailSender/Dockerfile
    dns: 
      - 8.8.8.8 
      - 1.1.1.1
    env_file: .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - emitterPersonal
    depends_on:
      api_service:
        condition: service_healthy
  documents_service:
    container_name: documents_service
    restart: unless-stopped
    profiles:
      - microservices
    build:
      context: ./Backend/
      dockerfile: DocumentsService/Dockerfile
    dns: 
      - 8.8.8.8 
      - 1.1.1.1
    env_file: .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - emitterPersonal
    depends_on:
      api_service:
        condition: service_healthy
  mock_registrator_service:
    container_name: mock_registrator_service
    restart: unless-stopped
    profiles:
      - microservices
    build:
      context: ./Backend/
      dockerfile: Registrator.API/Dockerfile
    dns: 
      - 8.8.8.8 
      - 1.1.1.1
    env_file: .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - emitterPersonal
    depends_on:
      api_service:
        condition: service_healthy
  reports_service:
    container_name: reports_service
    restart: unless-stopped
    profiles:
      - microservices
    build:
      context: ./Backend/
      dockerfile: ExternalOrderReportsService/Dockerfile
    dns: 
      - 8.8.8.8 
      - 1.1.1.1
    env_file: .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - emitterPersonal
    depends_on:
      api_service:
        condition: service_healthy
  audit_service:
    container_name: audit_service
    restart: unless-stopped
    profiles:
      - microservices
    build:
      context: ./Backend/
      dockerfile: AuditService/Dockerfile
    dns: 
      - 8.8.8.8 
      - 1.1.1.1
    env_file: .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - emitterPersonal
    depends_on:
      api_service:
        condition: service_healthy
  result_service:
    container_name: result_service
    restart: unless-stopped
    profiles:
      - microservices
    build:
      context: ./Backend/
      dockerfile: ResultHubservice/Dockerfile
    dns: 
      - 8.8.8.8 
      - 1.1.1.1
    env_file: .env
    environment:
      - ASPNETCORE_URLS=http://+:5001
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5001:5001"
    networks:
      - emitterPersonal
    depends_on:
      api_service:
        condition: service_healthy

  api_postgres_db:
    image: postgres:latest
    container_name: api_postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_API_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
    - postgres-data-service-api:/var/lib/postgresql/data
    - ./db_dump:/docker-entrypoint-initdb.d
    ports:
    - "5432:5432"
    networks:
      - emitterPersonal
    healthcheck:
      test: ["CMD-SHELL", "psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  documents_postgres_db:
    image: postgres:latest
    container_name: documents_postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DOCUMENTS_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
    - postgres-data-service-documents:/var/lib/postgresql/data
    ports:
    - "5433:5432"
    networks:
      - emitterPersonal
    healthcheck:
      test: ["CMD-SHELL", "psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  external_registrator_db:
    image: postgres:latest
    container_name: external_registrator_db
    environment:
      POSTGRES_DB: ${POSTGRES_REGISTRATOR_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
    - postgres-data-service-registrator:/var/lib/postgresql/data
    ports:
    - "5434:5432"
    networks:
      - emitterPersonal
    healthcheck:
      test: ["CMD-SHELL", "psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  report_postgres_db:
    image: postgres:latest
    container_name: report_postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_REPORTS_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
    - postgres-data-service-reports:/var/lib/postgresql/data
    ports:
    - "5435:5432"
    networks:
      - emitterPersonal
    healthcheck:
      test: ["CMD-SHELL", "psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    #command: postgres -p 5433
  audit_log_postgres_db:
    image: postgres:latest
    container_name: audit_log_postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_AUDIT_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
    - postgres-data-service-audit:/var/lib/postgresql/data
    ports:
    - "5436:5432"
    networks:
      - emitterPersonal
    healthcheck:
      test: ["CMD-SHELL", "psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6380:6380"
    command: redis-server --port 6380
    networks:
      - emitterPersonal
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 3s
      timeout: 2s
      retries: 5
  rabbitmq:
    restart: unless-stopped
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBIT_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD:-}
    ports:
      - "5672:5672" # порт для AMQP (основной протокол RabbitMq)
      - "15672:15672" # порт для управления через браузер
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - emitterPersonal
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    networks:
      - emitterPersonal
  # nexus:
  #   image: sonatype/nexus3:latest
  #   container_name: nexus
  #   ports:
  #     - "8081:8081"   # Веб-интерфейс Nexus
  #     - "8082:8082"   # NuGet репозиторий 
  #     - "8083:8083"   # Docker репозиторий 
  #     - "8443:8443"   # Для HTTPS
  #   volumes:
  #     - nexus-data:/var/lib/nexus
  #     - ./ssl/nexus-https.pfx:/opt/sonatype/nexus/etc/ssl/nexus.pfx:ro
  #     - ./ssl/nexus-https.crt:/usr/local/share/ca-certificates/nexus.crt:ro
  #   environment:
  #     - NEXUS_SSL_ENABLED=true
  #     - NEXUS_SSL_KEYSTORE=/opt/sonatype/nexus/etc/ssl/nexus.pfx
  #     - NEXUS_SSL_KEYSTORE_PASSWORD=87ihagof
  #   restart: unless-stopped

volumes:
  #postgres-data-service-auth:
  postgres-data-service-api:
  postgres-data-service-documents:
  postgres-data-service-registrator:
  postgres-data-service-reports:
  postgres-data-service-audit:
  rabbitmq-data:
  nexus-data:

networks:
  emitterPersonal:
    driver: bridge