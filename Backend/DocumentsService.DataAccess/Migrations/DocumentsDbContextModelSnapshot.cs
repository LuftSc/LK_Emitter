// <auto-generated />
using System;
using System.Collections.Generic;
using DocumentsService.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DocumentsService.DataAccess.Migrations
{
    [DbContext(typeof(DocumentsDbContext))]
    partial class DocumentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmitterPersonalAccount.Core.Domain.Models.Postgres.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmitterSended")
                        .HasColumnType("boolean");

                    b.Property<int>("IssuerId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("EmitterPersonalAccount.Core.Domain.Models.Postgres.Registrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("REGISTRATOR_ID");

                    b.ComplexProperty<Dictionary<string, object>>("Location", "EmitterPersonalAccount.Core.Domain.Models.Postgres.Registrator.Location#Location", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(110)
                                .HasColumnType("character varying(110)")
                                .HasColumnName("ADDRESS");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("COD_COUNTRY");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("IND");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("character varying(25)")
                                .HasColumnName("COD_REGION");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("OGRN", "EmitterPersonalAccount.Core.Domain.Models.Postgres.Registrator.OGRN#OGRNInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("DateOfAssignment")
                                .HasColumnType("date")
                                .HasColumnName("DT_OGRN");

                            b1.Property<string>("Issuer")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("GIV_OGRN");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("OGRN");
                        });

                    b.HasKey("Id");

                    b.ToTable("Registrator", (string)null);
                });

            modelBuilder.Entity("EmitterPersonalAccount.Core.Domain.Models.Postgres.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RegistratorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegistratorId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("EmitterPersonalAccount.Core.Domain.Models.Postgres.Document", b =>
                {
                    b.HasOne("EmitterPersonalAccount.Core.Domain.Models.Postgres.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmitterPersonalAccount.Core.Domain.Models.Postgres.User", b =>
                {
                    b.HasOne("EmitterPersonalAccount.Core.Domain.Models.Postgres.Registrator", "Registrator")
                        .WithMany("Users")
                        .HasForeignKey("RegistratorId");

                    b.Navigation("Registrator");
                });

            modelBuilder.Entity("EmitterPersonalAccount.Core.Domain.Models.Postgres.Registrator", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
